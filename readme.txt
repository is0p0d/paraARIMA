paraArima.py
A program for calculating arima models in parallel.

Jim Moroney, 2022
Tennessee Technological University

Last Update: 12.10.2022

I.) QUICKSTART

python3 paraArima.py -i data.csv

II.) REQUIREMENTS
-Data
paraArima.py works under the assumption that the data given to it is of the form provided in "AllAssetData.csv." That is to say: a collection of independent meters, keyed by their meter ID's and with readings indexed by the time at which they were taken.

In its current state, the data conditioning that paraArima.py completes before processing is static, and is unable to be defined by the user (see planned features). The data must have columns containing on the first row "AMI Meter ID", "Date", "Residential", "Total" as well as a selection of meter ID's. The last row of the data, containing totals by meter, is also removed and thusly must also be present.

-Packages
All required packages can be secured by running the included packagelist.txt through pip.

III.) COMMAND LINE ARGUMENTS

    i- or --Input

    Purpose: Specifies input file.
    Required: Yes
    Expects: .csv file (see REQUIREMENTS -Data)
    Default: None

    This flag specifies the data you wish to feed into the program. It is the only flag that the program requires you to set before being able to run.

    -o or --Output

    Purpose: Specifies output path
    Required: No
    Expects: string containing user specified path
    Default: Program directory

    This flag is used to determine where the output of the program is to be stored. If left unset, the output of the program will simply default to storing itself in the directory that the program resides in. i.e. ./

    -s or --Season
    Purpose: Specifies seasonality of data
    Required: No
    Expects: d, w, m, q, b, y
    default: m

    This flag specifies how the program will split a given meter into "seasons" to calculate individual ARIMA models on. This flag works by grouping on date values, the arguments translate as follows:
        d - by Day, w - by Week, m - by Month, q - by Quarter(3m), b - biyearly(6m), y - by Year
    WARNING: Setting this value beyond m - month requires a significant amount of RAM to fully process on a large dataset. Upwards of 32 gigabytes.

    -o or --Operation
    Purpose: Determines whether ARIMA calculations are done in serial or parallel.
    Required: No
    Expects: s, p
    Default: s

    This flag allows the user to dictate how the program executes the ARIMA portion of its code. 
    If set to s, paraArima will perform its stepwise calculations and model training/testing on one season of data at a time, then move on to the next one. 
    If set to p, paraArima will spawn individual processes for each season of data and will calculate all stepwise operations and model training/testing in parallel.
    WARNING: parallel operation requires a SIGNIFICANT amount of RAM to complete, tests on AllAssetData.csv running a seasonality of q required upwards of 150 gigabytes to complete.

IV.) TECHNICAL OUTLINE
This section is a rough outline describing the operation of the program as it executes alongside descriptions of functions and datasets used within.

    1.) Data Structures
    ParaARIMA uses two primary objects to store attributes of both the ARIMA models generated by this program and the data it's parsing. These objects are of type dataclass, and are facilitated by the dataclasses package.

        1.1) class arimaData
        arimaData has 

        1.2) class meterWrapper

        1.3) Global Lists

    2.) functions

        2.1) arima_process()

    3.) Program Execution

        3.1) Command Line Parsing

        3.2) CSV Parsing and Dataframe conditioning

        3.3) Data Disaggregation

        3.4) ARIMA Preconditioning

        3.5) ARIMA Calculations

            3.5.a) Serial Operation
            3.5.b) Parallel Operation
        
    4.) Output Storage

        4.1) Binary Data

        4.2) Visual Data

V.) PLANNED FEATURES

    1.) Data config file
    2.) season averaging 
    3.) message passing
